@page "/"
@inject HttpClient Http
@using System.Linq

<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">

<h1>Top 100 Ranked Cryptos</h1>

<p>Table can be sorted by Rank and Name table headers and search input field added.</p>

<style>
    .scroll {
        overflow:scroll;
        height: 70vh;
    }

    .sort-th {
        cursor: pointer;
    }

    .fa {
        float: right;
    }
</style>

<div class="input-group mb-3">
    <div class="input-group-prepend pr-3">
        <label class="input-group-text">Filter: </label>
        <input class="form-control" id="search-name" placeholder="Search Name..." @oninput="OnSearchTextChange" />
    </div>
</div>

@if (cryptos == null)
{
    <p><em>Loading...</em></p>
}
else
{
<div class="scroll">
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th class="sort-th" @onclick="@(() => SortTable("rank"))">Rank<span class="fa @(SetSortIcon("rank"))"></span></th>
                <th class="sort-th" @onclick="@(() => SortTable("name"))">Name<span class="fa @(SetSortIcon("name"))"></span></th>
                <th>ID</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var crypto in filteredCryptos.data)
            {
                var link = $"/crypto/{crypto.id}";
            <tr>
                <td>@crypto.rank</td>
                <td><NavLink href="@link">@crypto.name</NavLink></td>
                <td>@crypto.id</td>
                <td>$ @crypto.price_usd</td>
            </tr>
            }
        </tbody>
    </table>
</div>
}

@code {
    private Root cryptos;
    private Root filteredCryptos;
    private bool isSortedAscending;
    private string activeSortColumn;

    protected override async Task OnInitializedAsync()
    {
        //there are only 100 crypto currerncies in this API, set limit to max
        cryptos = await Http.GetFromJsonAsync<Root>("https://api.coinlore.net/api/tickers/?start=0&limit=100");
        filteredCryptos = cryptos;
    }

    public class Datum
    {
        public string id { get; set; }
        public string symbol { get; set; }
        public string name { get; set; }
        public string nameid { get; set; }
        public int rank { get; set; }
        public string price_usd { get; set; }
        public string percent_change_24h { get; set; }
        public string percent_change_1h { get; set; }
        public string percent_change_7d { get; set; }
        public string price_btc { get; set; }
        public string market_cap_usd { get; set; }
        public double volume24 { get; set; }
        public double volume24a { get; set; }
        public string csupply { get; set; }
        public string tsupply { get; set; }
        public string msupply { get; set; }
    }

    public class Info
    {
        public int coins_num { get; set; }
        public int time { get; set; }
    }

    public class Root
    {
        public List<Datum> data { get; set; }
        public Info info { get; set; }
    }

    private async void OnSearchTextChange(ChangeEventArgs changeEventArgs)
    {
        string searchText = changeEventArgs.Value.ToString();
        Console.WriteLine(searchText);
        filteredCryptos.data = cryptos.data.Where(crypto => crypto.name.Contains(searchText)).ToList();
        Console.WriteLine(cryptos.data.Count());
        Console.WriteLine(filteredCryptos.data.Count());
        cryptos = await Http.GetFromJsonAsync<Root>("https://api.coinlore.net/api/tickers/?start=0&limit=100");
    }

    private void SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            filteredCryptos.data = filteredCryptos.data.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if (isSortedAscending)
            {
                filteredCryptos.data = filteredCryptos.data.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                filteredCryptos.data = filteredCryptos.data.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            isSortedAscending = !isSortedAscending;
        }
    }

    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }
}
