@page "/crypto/{cryptoId:int}"
@inject HttpClient Http

@*Link to the styling for the arrows used for the sort by column headers*@
<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">

<style>
    .scroll {
        overflow: scroll;
        max-height: 55vh;
    }

    .sort-th {
        cursor: pointer;
    }

    .fa {
        float: right;
    }
</style>

<h1>Crypto</h1>

<p>This table display more specific data on a crypto.</p>

@if (cryptos == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Rank</th>
                    <th>Price</th>
                    <th>Change 1h</th>
                    <th>Change 24h</th>
                    <th>Change 7 days</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var crypto in cryptos)
                {
                    <tr>
                        <td>@crypto.id</td>
                        <td>@crypto.name</td>
                        <td>@crypto.rank</td>
                        <td>$ @crypto.price_usd</td>
                        @if (crypto.percent_change_1h.Contains("-"))
                        {
                            <td style="color:red">@crypto.percent_change_1h%</td>
                        }
                        else
                        {
                            <td style="color:green">@crypto.percent_change_1h%</td>
                        }
                        @if (crypto.percent_change_24h.Contains("-"))
                        {
                            <td style="color:red">@crypto.percent_change_24h%</td>
                        }
                        else
                        {
                            <td style="color:green">@crypto.percent_change_24h%</td>
                        }
                        @if (crypto.percent_change_7d.Contains("-"))
                        {
                            <td style="color:red">@crypto.percent_change_7d%</td>
                        }
                        else
                        {
                            <td style="color:green">@crypto.percent_change_7d%</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
        <br />
        <h1 id="MarketTitle">Crypto Markets</h1>
        <p>This table can be sorted by the Market header.</p>
        <div class="scroll">
            <table class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th class="sort-th" @onclick="@(() => SortTable("name"))">Market Name<span class="fa @(SetSortIcon("name"))"></span></th>
                        <th>Price</th>
                        <th>Volume</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var crypto in cryptoMarkets)
                    {
                        <tr>
                            <td>@crypto.name</td>
                            <td>$ @crypto.price_usd</td>
                            <td>@crypto.volume</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    //paramater used in order to redirect to this page depending on the crypto clicked on in the homepage.
    [Parameter]
    public int cryptoId { get; set; }

    private bool isSortedAscending;
    private string activeSortColumn;
    private Root[] cryptos;
    private MarketRoot[] cryptoMarkets;

    protected override async Task OnInitializedAsync()
    {
        //using the paramater to get the JSON return for a specific crypto, determined by on the homepage
        string getURL = $"https://api.coinlore.net/api/ticker/?id={cryptoId}";
        cryptos = await Http.GetFromJsonAsync<Root[]>(getURL);

        //using the paramater to get the JSON return for a specific cryptos markets, determined by on the homepage
        string getMarketURL = $"https://api.coinlore.net/api/coin/markets/?id={cryptoId}";
        cryptoMarkets = await Http.GetFromJsonAsync<MarketRoot[]>(getMarketURL);
    }

    public class Root
    {
        public string id { get; set; }
        public string symbol { get; set; }
        public string name { get; set; }
        public string nameid { get; set; }
        public int rank { get; set; }
        public string price_usd { get; set; }
        public string percent_change_24h { get; set; }
        public string percent_change_1h { get; set; }
        public string percent_change_7d { get; set; }
        public string market_cap_usd { get; set; }
        public string volume24 { get; set; }
        public string volume24_native { get; set; }
        public string csupply { get; set; }
        public string price_btc { get; set; }
        public string tsupply { get; set; }
        public string msupply { get; set; }
    }

    public class MarketRoot
    {
        public string name { get; set; }
        public string @base { get; set; }
        public string quote { get; set; }
        public double? price { get; set; }
        public double? price_usd { get; set; }
        public double? volume { get; set; }
        public double? volume_usd { get; set; }
        public int? time { get; set; }
    }

    private void SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            cryptoMarkets = cryptoMarkets.OrderBy(cryptoMarket => cryptoMarket.GetType().GetProperty(columnName).GetValue(cryptoMarket, null)).ToArray();
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if (isSortedAscending)
            {
                cryptoMarkets = cryptoMarkets.OrderByDescending(cryptoMarket => cryptoMarket.GetType().GetProperty(columnName).GetValue(cryptoMarket, null)).ToArray();
            }
            else
            {
                cryptoMarkets = cryptoMarkets.OrderBy(cryptoMarket => cryptoMarket.GetType().GetProperty(columnName).GetValue(cryptoMarket, null)).ToArray();
            }
            isSortedAscending = !isSortedAscending;
        }
    }

    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }
}